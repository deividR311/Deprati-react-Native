// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SearchProduct renders correctly in Snapshot 1`] = `
<RNCSafeAreaProvider
  onInsetsChange={[Function]}
  style={
    Array [
      Object {
        "flex": 1,
      },
      undefined,
    ]
  }
>
  <RNSScreenStack
    style={
      Object {
        "flex": 1,
      }
    }
  >
    <RNSScreen
      collapsable={false}
      forwardedRef={[Function]}
      gestureResponseDistance={
        Object {
          "bottom": -1,
          "end": -1,
          "start": -1,
          "top": -1,
        }
      }
      onAppear={[Function]}
      onDisappear={[Function]}
      onDismissed={[Function]}
      onTransitionProgress={[Function]}
      onWillDisappear={[Function]}
      replaceAnimation="push"
      stackPresentation="push"
      style={
        Object {
          "bottom": 0,
          "left": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
        }
      }
      swipeDirection="horizontal"
    >
      <RNSScreenStackHeaderConfig
        backButtonInCustomView={false}
        backgroundColor="rgb(255, 255, 255)"
        color="rgb(0, 122, 255)"
        direction="ltr"
        disableBackButtonMenu={false}
        hidden={false}
        hideBackButton={false}
        hideShadow={true}
        largeTitleHideShadow={false}
        title="default"
        titleColor="rgb(28, 28, 30)"
        topInsetEnabled={false}
        translucent={false}
      />
      <View
        style={
          Array [
            Object {
              "flex": 1,
            },
            Object {
              "backgroundColor": "rgb(242, 242, 242)",
            },
            Object {
              "backgroundColor": "#ffffff",
            },
          ]
        }
      >
        <RNCSafeAreaView
          edges={
            Array [
              "bottom",
              "left",
              "right",
              "top",
            ]
          }
          style={
            Object {
              "backgroundColor": "#ffffff",
              "display": "flex",
              "flex": 1,
              "flexDirection": "column",
              "justifyContent": "space-between",
              "width": "100%",
            }
          }
        >
          <View
            style={
              Array [
                Object {
                  "alignItems": "center",
                  "backgroundColor": "#ffffff",
                  "display": "flex",
                  "flexDirection": "row",
                  "justifyContent": "space-between",
                  "marginTop": -50,
                  "paddingBottom": 5,
                  "paddingHorizontal": 16,
                  "paddingVertical": 16,
                  "position": "relative",
                  "width": "100%",
                },
              ]
            }
          >
            <View
              accessible={true}
              collapsable={false}
              focusable={true}
              onBlur={[Function]}
              onClick={[Function]}
              onFocus={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                Object {
                  "bottom": 13,
                  "left": "79%",
                  "position": "absolute",
                  "zIndex": 2,
                }
              }
            >
              <Text
                allowFontScaling={false}
                selectable={false}
                style={
                  Array [
                    Object {
                      "color": "#263238",
                      "fontSize": 24,
                    },
                    undefined,
                    Object {
                      "fontFamily": "Material Design Icons",
                      "fontStyle": "normal",
                      "fontWeight": "normal",
                    },
                    Object {},
                  ]
                }
              >
                󰁲
              </Text>
            </View>
            <TextInput
              autoFocus={true}
              onChangeText={[Function]}
              onSubmitEditing={[Function]}
              placeholderTextColor="#979797"
              returnKeyType="search"
              style={
                Array [
                  Object {
                    "backgroundColor": "#E9EBED",
                    "borderRadius": 3,
                    "flexGrow": 3,
                    "height": 40,
                    "marginRight": 16,
                    "maxWidth": "85%",
                    "paddingLeft": 16,
                    "paddingRight": 10,
                  },
                  Object {
                    "color": "#263238",
                    "fontFamily": "Roboto-Regular",
                    "fontSize": 14,
                    "fontWeight": "400",
                    "letterSpacing": 0.8,
                    "lineHeight": 16,
                    "opacity": 0.7,
                  },
                ]
              }
              value=""
            />
            <View
              accessible={true}
              collapsable={false}
              focusable={true}
              onBlur={[Function]}
              onClick={[Function]}
              onFocus={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
            >
              <Text
                style={
                  Array [
                    Object {
                      "color": "#263238",
                      "fontFamily": "Roboto-Medium",
                      "fontSize": 14,
                      "fontWeight": "500",
                      "lineHeight": 16,
                    },
                  ]
                }
              >
                Cerrar
              </Text>
            </View>
          </View>
          <RCTScrollView
            ListEmptyComponent={[Function]}
            ListHeaderComponent={[Function]}
            collapsable={false}
            contentContainerStyle={
              Object {
                "backgroundColor": "#ffffff",
                "flexGrow": 1,
                "paddingTop": 16,
              }
            }
            data={Array []}
            getItem={[Function]}
            getItemCount={[Function]}
            handlerTag={2}
            handlerType="NativeViewGestureHandler"
            keyExtractor={[Function]}
            onContentSizeChange={[Function]}
            onGestureHandlerEvent={[Function]}
            onGestureHandlerStateChange={[Function]}
            onLayout={[Function]}
            onMomentumScrollBegin={[Function]}
            onMomentumScrollEnd={[Function]}
            onScroll={[Function]}
            onScrollBeginDrag={[Function]}
            onScrollEndDrag={[Function]}
            removeClippedSubviews={false}
            renderItem={[Function]}
            renderScrollComponent={[Function]}
            scrollEventThrottle={50}
            showsHorizontalScrollIndicator={false}
            stickyHeaderIndices={Array []}
            style={
              Object {
                "backgroundColor": "#ffffff",
                "width": "100%",
              }
            }
            viewabilityConfigCallbackPairs={Array []}
          >
            <View>
              <View
                onLayout={[Function]}
              />
            </View>
          </RCTScrollView>
          <View
            onLayout={[Function]}
            style={
              Object {
                "paddingBottom": 0,
              }
            }
          >
            <View
              accessible={true}
              collapsable={false}
              focusable={true}
              onBlur={[Function]}
              onClick={[Function]}
              onFocus={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
            >
              <View
                style={
                  Object {
                    "alignItems": "center",
                    "backgroundColor": "#FAF9F9",
                    "borderRadius": 3,
                    "flexDirection": "row",
                    "height": 40,
                    "justifyContent": "center",
                    "overflow": "hidden",
                  }
                }
              >
                <Text
                  allowFontScaling={false}
                  selectable={false}
                  style={
                    Array [
                      Object {
                        "color": "#E31A2C",
                        "fontSize": 24,
                      },
                      Object {
                        "paddingRight": 16,
                      },
                      Object {
                        "fontFamily": "Material Design Icons",
                        "fontStyle": "normal",
                        "fontWeight": "normal",
                      },
                      Object {},
                    ]
                  }
                >
                  󰁲
                </Text>
                <Text
                  style={
                    Object {
                      "color": "#E31A2C",
                      "fontFamily": "Roboto-Regular",
                      "fontSize": 14,
                      "fontWeight": "400",
                      "lineHeight": 16,
                    }
                  }
                >
                  Escanear código
                </Text>
              </View>
            </View>
          </View>
        </RNCSafeAreaView>
      </View>
    </RNSScreen>
  </RNSScreenStack>
</RNCSafeAreaProvider>
`;
